/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  CeoPagControllerEstabelecimentosQueryResponse,
  CeoPagControllerEstabelecimentosQueryParams,
  CeoPagControllerEstabelecimentos400,
  CeoPagControllerEstabelecimentos401,
  CeoPagControllerEstabelecimentos404,
  CeoPagControllerEstabelecimentos500,
} from '../../types/CeoPagControllerEstabelecimentos.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const ceoPagControllerEstabelecimentosQueryKey = (params: CeoPagControllerEstabelecimentosQueryParams) =>
  [{ url: '/api/ceopag/estabelecimentos' }, ...(params ? [params] : [])] as const

export type CeoPagControllerEstabelecimentosQueryKey = ReturnType<typeof ceoPagControllerEstabelecimentosQueryKey>

/**
 * @summary Lista de estabelecimentos cadastrados na CeoPag
 * {@link /api/ceopag/estabelecimentos}
 */
export async function ceoPagControllerEstabelecimentos(
  params: CeoPagControllerEstabelecimentosQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CeoPagControllerEstabelecimentosQueryResponse,
    ResponseErrorConfig<
      CeoPagControllerEstabelecimentos400 | CeoPagControllerEstabelecimentos401 | CeoPagControllerEstabelecimentos404 | CeoPagControllerEstabelecimentos500
    >,
    unknown
  >({ method: 'GET', url: `/api/ceopag/estabelecimentos`, baseURL: 'http://localhost:3000', params, ...requestConfig })
  return res
}

export function ceoPagControllerEstabelecimentosQueryOptions(
  params: CeoPagControllerEstabelecimentosQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = ceoPagControllerEstabelecimentosQueryKey(params)
  return queryOptions<
    ResponseConfig<CeoPagControllerEstabelecimentosQueryResponse>,
    ResponseErrorConfig<
      CeoPagControllerEstabelecimentos400 | CeoPagControllerEstabelecimentos401 | CeoPagControllerEstabelecimentos404 | CeoPagControllerEstabelecimentos500
    >,
    ResponseConfig<CeoPagControllerEstabelecimentosQueryResponse>,
    typeof queryKey
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return ceoPagControllerEstabelecimentos(params, config)
    },
  })
}

/**
 * @summary Lista de estabelecimentos cadastrados na CeoPag
 * {@link /api/ceopag/estabelecimentos}
 */
export function useCeoPagControllerEstabelecimentos<
  TData = ResponseConfig<CeoPagControllerEstabelecimentosQueryResponse>,
  TQueryData = ResponseConfig<CeoPagControllerEstabelecimentosQueryResponse>,
  TQueryKey extends QueryKey = CeoPagControllerEstabelecimentosQueryKey,
>(
  params: CeoPagControllerEstabelecimentosQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<CeoPagControllerEstabelecimentosQueryResponse>,
        ResponseErrorConfig<
          CeoPagControllerEstabelecimentos400 | CeoPagControllerEstabelecimentos401 | CeoPagControllerEstabelecimentos404 | CeoPagControllerEstabelecimentos500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? ceoPagControllerEstabelecimentosQueryKey(params)

  const query = useQuery(
    {
      ...(ceoPagControllerEstabelecimentosQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      CeoPagControllerEstabelecimentos400 | CeoPagControllerEstabelecimentos401 | CeoPagControllerEstabelecimentos404 | CeoPagControllerEstabelecimentos500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}