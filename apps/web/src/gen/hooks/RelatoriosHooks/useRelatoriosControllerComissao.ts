/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  RelatoriosControllerComissaoQueryResponse,
  RelatoriosControllerComissaoQueryParams,
  RelatoriosControllerComissao400,
  RelatoriosControllerComissao401,
  RelatoriosControllerComissao404,
  RelatoriosControllerComissao500,
} from '../../types/RelatoriosControllerComissao.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const relatoriosControllerComissaoQueryKey = (params: RelatoriosControllerComissaoQueryParams) =>
  [{ url: '/relatorios/comissao' }, ...(params ? [params] : [])] as const

export type RelatoriosControllerComissaoQueryKey = ReturnType<typeof relatoriosControllerComissaoQueryKey>

/**
 * @summary Total de comissão no período informado
 * {@link /relatorios/comissao}
 */
export async function relatoriosControllerComissao(
  params: RelatoriosControllerComissaoQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    RelatoriosControllerComissaoQueryResponse,
    ResponseErrorConfig<RelatoriosControllerComissao400 | RelatoriosControllerComissao401 | RelatoriosControllerComissao404 | RelatoriosControllerComissao500>,
    unknown
  >({ method: 'GET', url: `/relatorios/comissao`, baseURL: 'http://localhost:3000', params, ...requestConfig })
  return res
}

export function relatoriosControllerComissaoQueryOptions(
  params: RelatoriosControllerComissaoQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = relatoriosControllerComissaoQueryKey(params)
  return queryOptions<
    ResponseConfig<RelatoriosControllerComissaoQueryResponse>,
    ResponseErrorConfig<RelatoriosControllerComissao400 | RelatoriosControllerComissao401 | RelatoriosControllerComissao404 | RelatoriosControllerComissao500>,
    ResponseConfig<RelatoriosControllerComissaoQueryResponse>,
    typeof queryKey
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return relatoriosControllerComissao(params, config)
    },
  })
}

/**
 * @summary Total de comissão no período informado
 * {@link /relatorios/comissao}
 */
export function useRelatoriosControllerComissao<
  TData = ResponseConfig<RelatoriosControllerComissaoQueryResponse>,
  TQueryData = ResponseConfig<RelatoriosControllerComissaoQueryResponse>,
  TQueryKey extends QueryKey = RelatoriosControllerComissaoQueryKey,
>(
  params: RelatoriosControllerComissaoQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<RelatoriosControllerComissaoQueryResponse>,
        ResponseErrorConfig<
          RelatoriosControllerComissao400 | RelatoriosControllerComissao401 | RelatoriosControllerComissao404 | RelatoriosControllerComissao500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? relatoriosControllerComissaoQueryKey(params)

  const query = useQuery(
    {
      ...(relatoriosControllerComissaoQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<RelatoriosControllerComissao400 | RelatoriosControllerComissao401 | RelatoriosControllerComissao404 | RelatoriosControllerComissao500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}