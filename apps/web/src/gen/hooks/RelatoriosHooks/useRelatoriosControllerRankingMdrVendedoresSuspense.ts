/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  RelatoriosControllerRankingMdrVendedoresQueryResponse,
  RelatoriosControllerRankingMdrVendedoresQueryParams,
  RelatoriosControllerRankingMdrVendedores400,
  RelatoriosControllerRankingMdrVendedores401,
  RelatoriosControllerRankingMdrVendedores404,
  RelatoriosControllerRankingMdrVendedores500,
} from '../../types/RelatoriosControllerRankingMdrVendedores.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const relatoriosControllerRankingMdrVendedoresSuspenseQueryKey = (params: RelatoriosControllerRankingMdrVendedoresQueryParams) =>
  [{ url: '/relatorios/vendedores/ranking' }, ...(params ? [params] : [])] as const

export type RelatoriosControllerRankingMdrVendedoresSuspenseQueryKey = ReturnType<typeof relatoriosControllerRankingMdrVendedoresSuspenseQueryKey>

/**
 * @summary Comissão por vendedor no perido informado
 * {@link /relatorios/vendedores/ranking}
 */
export async function relatoriosControllerRankingMdrVendedoresSuspense(
  params: RelatoriosControllerRankingMdrVendedoresQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    RelatoriosControllerRankingMdrVendedoresQueryResponse,
    ResponseErrorConfig<
      | RelatoriosControllerRankingMdrVendedores400
      | RelatoriosControllerRankingMdrVendedores401
      | RelatoriosControllerRankingMdrVendedores404
      | RelatoriosControllerRankingMdrVendedores500
    >,
    unknown
  >({ method: 'GET', url: `/relatorios/vendedores/ranking`, baseURL: 'http://localhost:3000', params, ...requestConfig })
  return res
}

export function relatoriosControllerRankingMdrVendedoresSuspenseQueryOptions(
  params: RelatoriosControllerRankingMdrVendedoresQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = relatoriosControllerRankingMdrVendedoresSuspenseQueryKey(params)
  return queryOptions<
    ResponseConfig<RelatoriosControllerRankingMdrVendedoresQueryResponse>,
    ResponseErrorConfig<
      | RelatoriosControllerRankingMdrVendedores400
      | RelatoriosControllerRankingMdrVendedores401
      | RelatoriosControllerRankingMdrVendedores404
      | RelatoriosControllerRankingMdrVendedores500
    >,
    ResponseConfig<RelatoriosControllerRankingMdrVendedoresQueryResponse>,
    typeof queryKey
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return relatoriosControllerRankingMdrVendedoresSuspense(params, config)
    },
  })
}

/**
 * @summary Comissão por vendedor no perido informado
 * {@link /relatorios/vendedores/ranking}
 */
export function useRelatoriosControllerRankingMdrVendedoresSuspense<
  TData = ResponseConfig<RelatoriosControllerRankingMdrVendedoresQueryResponse>,
  TQueryKey extends QueryKey = RelatoriosControllerRankingMdrVendedoresSuspenseQueryKey,
>(
  params: RelatoriosControllerRankingMdrVendedoresQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<RelatoriosControllerRankingMdrVendedoresQueryResponse>,
        ResponseErrorConfig<
          | RelatoriosControllerRankingMdrVendedores400
          | RelatoriosControllerRankingMdrVendedores401
          | RelatoriosControllerRankingMdrVendedores404
          | RelatoriosControllerRankingMdrVendedores500
        >,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? relatoriosControllerRankingMdrVendedoresSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(relatoriosControllerRankingMdrVendedoresSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<
      | RelatoriosControllerRankingMdrVendedores400
      | RelatoriosControllerRankingMdrVendedores401
      | RelatoriosControllerRankingMdrVendedores404
      | RelatoriosControllerRankingMdrVendedores500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}