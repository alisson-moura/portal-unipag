/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  RelatoriosControllerTotalEstabelecimentosQueryResponse,
  RelatoriosControllerTotalEstabelecimentos400,
  RelatoriosControllerTotalEstabelecimentos401,
  RelatoriosControllerTotalEstabelecimentos404,
  RelatoriosControllerTotalEstabelecimentos500,
} from '../../types/RelatoriosControllerTotalEstabelecimentos.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const relatoriosControllerTotalEstabelecimentosQueryKey = () => [{ url: '/relatorios/estabelecimentos' }] as const

export type RelatoriosControllerTotalEstabelecimentosQueryKey = ReturnType<typeof relatoriosControllerTotalEstabelecimentosQueryKey>

/**
 * @summary Total de estabelecimentos atríbuidos a vendedores
 * {@link /relatorios/estabelecimentos}
 */
export async function relatoriosControllerTotalEstabelecimentos(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    RelatoriosControllerTotalEstabelecimentosQueryResponse,
    ResponseErrorConfig<
      | RelatoriosControllerTotalEstabelecimentos400
      | RelatoriosControllerTotalEstabelecimentos401
      | RelatoriosControllerTotalEstabelecimentos404
      | RelatoriosControllerTotalEstabelecimentos500
    >,
    unknown
  >({ method: 'GET', url: `/relatorios/estabelecimentos`, baseURL: 'http://localhost:3000', ...requestConfig })
  return res
}

export function relatoriosControllerTotalEstabelecimentosQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = relatoriosControllerTotalEstabelecimentosQueryKey()
  return queryOptions<
    ResponseConfig<RelatoriosControllerTotalEstabelecimentosQueryResponse>,
    ResponseErrorConfig<
      | RelatoriosControllerTotalEstabelecimentos400
      | RelatoriosControllerTotalEstabelecimentos401
      | RelatoriosControllerTotalEstabelecimentos404
      | RelatoriosControllerTotalEstabelecimentos500
    >,
    ResponseConfig<RelatoriosControllerTotalEstabelecimentosQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return relatoriosControllerTotalEstabelecimentos(config)
    },
  })
}

/**
 * @summary Total de estabelecimentos atríbuidos a vendedores
 * {@link /relatorios/estabelecimentos}
 */
export function useRelatoriosControllerTotalEstabelecimentos<
  TData = ResponseConfig<RelatoriosControllerTotalEstabelecimentosQueryResponse>,
  TQueryData = ResponseConfig<RelatoriosControllerTotalEstabelecimentosQueryResponse>,
  TQueryKey extends QueryKey = RelatoriosControllerTotalEstabelecimentosQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<RelatoriosControllerTotalEstabelecimentosQueryResponse>,
        ResponseErrorConfig<
          | RelatoriosControllerTotalEstabelecimentos400
          | RelatoriosControllerTotalEstabelecimentos401
          | RelatoriosControllerTotalEstabelecimentos404
          | RelatoriosControllerTotalEstabelecimentos500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? relatoriosControllerTotalEstabelecimentosQueryKey()

  const query = useQuery(
    {
      ...(relatoriosControllerTotalEstabelecimentosQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | RelatoriosControllerTotalEstabelecimentos400
      | RelatoriosControllerTotalEstabelecimentos401
      | RelatoriosControllerTotalEstabelecimentos404
      | RelatoriosControllerTotalEstabelecimentos500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}