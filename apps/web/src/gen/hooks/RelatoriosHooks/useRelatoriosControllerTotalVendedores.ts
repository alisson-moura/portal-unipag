/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  RelatoriosControllerTotalVendedoresQueryResponse,
  RelatoriosControllerTotalVendedores400,
  RelatoriosControllerTotalVendedores401,
  RelatoriosControllerTotalVendedores404,
  RelatoriosControllerTotalVendedores500,
} from '../../types/RelatoriosControllerTotalVendedores.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const relatoriosControllerTotalVendedoresQueryKey = () => [{ url: '/relatorios/vendedores' }] as const

export type RelatoriosControllerTotalVendedoresQueryKey = ReturnType<typeof relatoriosControllerTotalVendedoresQueryKey>

/**
 * @summary Total de vendedores ativos
 * {@link /relatorios/vendedores}
 */
export async function relatoriosControllerTotalVendedores(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    RelatoriosControllerTotalVendedoresQueryResponse,
    ResponseErrorConfig<
      | RelatoriosControllerTotalVendedores400
      | RelatoriosControllerTotalVendedores401
      | RelatoriosControllerTotalVendedores404
      | RelatoriosControllerTotalVendedores500
    >,
    unknown
  >({ method: 'GET', url: `/relatorios/vendedores`, baseURL: 'http://localhost:3000', ...requestConfig })
  return res
}

export function relatoriosControllerTotalVendedoresQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = relatoriosControllerTotalVendedoresQueryKey()
  return queryOptions<
    ResponseConfig<RelatoriosControllerTotalVendedoresQueryResponse>,
    ResponseErrorConfig<
      | RelatoriosControllerTotalVendedores400
      | RelatoriosControllerTotalVendedores401
      | RelatoriosControllerTotalVendedores404
      | RelatoriosControllerTotalVendedores500
    >,
    ResponseConfig<RelatoriosControllerTotalVendedoresQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return relatoriosControllerTotalVendedores(config)
    },
  })
}

/**
 * @summary Total de vendedores ativos
 * {@link /relatorios/vendedores}
 */
export function useRelatoriosControllerTotalVendedores<
  TData = ResponseConfig<RelatoriosControllerTotalVendedoresQueryResponse>,
  TQueryData = ResponseConfig<RelatoriosControllerTotalVendedoresQueryResponse>,
  TQueryKey extends QueryKey = RelatoriosControllerTotalVendedoresQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<RelatoriosControllerTotalVendedoresQueryResponse>,
        ResponseErrorConfig<
          | RelatoriosControllerTotalVendedores400
          | RelatoriosControllerTotalVendedores401
          | RelatoriosControllerTotalVendedores404
          | RelatoriosControllerTotalVendedores500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? relatoriosControllerTotalVendedoresQueryKey()

  const query = useQuery(
    {
      ...(relatoriosControllerTotalVendedoresQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | RelatoriosControllerTotalVendedores400
      | RelatoriosControllerTotalVendedores401
      | RelatoriosControllerTotalVendedores404
      | RelatoriosControllerTotalVendedores500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}