/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  UsuarioControllerAlterarStatusMutationRequest,
  UsuarioControllerAlterarStatusMutationResponse,
  UsuarioControllerAlterarStatusPathParams,
  UsuarioControllerAlterarStatus400,
  UsuarioControllerAlterarStatus401,
  UsuarioControllerAlterarStatus404,
  UsuarioControllerAlterarStatus500,
} from '../../types/UsuarioControllerAlterarStatus.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const usuarioControllerAlterarStatusMutationKey = () => [{ url: '/usuarios/{id}' }] as const

export type UsuarioControllerAlterarStatusMutationKey = ReturnType<typeof usuarioControllerAlterarStatusMutationKey>

/**
 * @summary Atualiza o status
 * {@link /usuarios/:id}
 */
export async function usuarioControllerAlterarStatus(
  id: UsuarioControllerAlterarStatusPathParams['id'],
  data: UsuarioControllerAlterarStatusMutationRequest,
  config: Partial<RequestConfig<UsuarioControllerAlterarStatusMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UsuarioControllerAlterarStatusMutationResponse,
    ResponseErrorConfig<
      UsuarioControllerAlterarStatus400 | UsuarioControllerAlterarStatus401 | UsuarioControllerAlterarStatus404 | UsuarioControllerAlterarStatus500
    >,
    UsuarioControllerAlterarStatusMutationRequest
  >({ method: 'PATCH', url: `/usuarios/${id}`, baseURL: 'http://localhost:3000', data, ...requestConfig })
  return res
}

/**
 * @summary Atualiza o status
 * {@link /usuarios/:id}
 */
export function useUsuarioControllerAlterarStatus<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UsuarioControllerAlterarStatusMutationResponse>,
      ResponseErrorConfig<
        UsuarioControllerAlterarStatus400 | UsuarioControllerAlterarStatus401 | UsuarioControllerAlterarStatus404 | UsuarioControllerAlterarStatus500
      >,
      { id: UsuarioControllerAlterarStatusPathParams['id']; data: UsuarioControllerAlterarStatusMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UsuarioControllerAlterarStatusMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? usuarioControllerAlterarStatusMutationKey()

  return useMutation<
    ResponseConfig<UsuarioControllerAlterarStatusMutationResponse>,
    ResponseErrorConfig<
      UsuarioControllerAlterarStatus400 | UsuarioControllerAlterarStatus401 | UsuarioControllerAlterarStatus404 | UsuarioControllerAlterarStatus500
    >,
    { id: UsuarioControllerAlterarStatusPathParams['id']; data: UsuarioControllerAlterarStatusMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return usuarioControllerAlterarStatus(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}