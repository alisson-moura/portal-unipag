/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  UsuarioControllerCreateMutationRequest,
  UsuarioControllerCreateMutationResponse,
  UsuarioControllerCreate400,
  UsuarioControllerCreate401,
  UsuarioControllerCreate404,
  UsuarioControllerCreate500,
} from '../../types/UsuarioControllerCreate.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const usuarioControllerCreateMutationKey = () => [{ url: '/usuarios' }] as const

export type UsuarioControllerCreateMutationKey = ReturnType<typeof usuarioControllerCreateMutationKey>

/**
 * @summary Cadastra um novo usuário no sistema
 * {@link /usuarios}
 */
export async function usuarioControllerCreate(
  data: UsuarioControllerCreateMutationRequest,
  config: Partial<RequestConfig<UsuarioControllerCreateMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UsuarioControllerCreateMutationResponse,
    ResponseErrorConfig<UsuarioControllerCreate400 | UsuarioControllerCreate401 | UsuarioControllerCreate404 | UsuarioControllerCreate500>,
    UsuarioControllerCreateMutationRequest
  >({ method: 'POST', url: `/usuarios`, baseURL: 'http://localhost:3000', data, ...requestConfig })
  return res
}

/**
 * @summary Cadastra um novo usuário no sistema
 * {@link /usuarios}
 */
export function useUsuarioControllerCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<UsuarioControllerCreateMutationResponse>,
      ResponseErrorConfig<UsuarioControllerCreate400 | UsuarioControllerCreate401 | UsuarioControllerCreate404 | UsuarioControllerCreate500>,
      { data: UsuarioControllerCreateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UsuarioControllerCreateMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? usuarioControllerCreateMutationKey()

  return useMutation<
    ResponseConfig<UsuarioControllerCreateMutationResponse>,
    ResponseErrorConfig<UsuarioControllerCreate400 | UsuarioControllerCreate401 | UsuarioControllerCreate404 | UsuarioControllerCreate500>,
    { data: UsuarioControllerCreateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return usuarioControllerCreate(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}