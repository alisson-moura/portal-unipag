/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  UsuarioControllerFindOneQueryResponse,
  UsuarioControllerFindOnePathParams,
  UsuarioControllerFindOne400,
  UsuarioControllerFindOne401,
  UsuarioControllerFindOne404,
  UsuarioControllerFindOne500,
} from '../../types/UsuarioControllerFindOne.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const usuarioControllerFindOneQueryKey = (id: UsuarioControllerFindOnePathParams['id']) => [{ url: '/usuarios/:id', params: { id: id } }] as const

export type UsuarioControllerFindOneQueryKey = ReturnType<typeof usuarioControllerFindOneQueryKey>

/**
 * @summary Dados do usuário
 * {@link /usuarios/:id}
 */
export async function usuarioControllerFindOne(id: UsuarioControllerFindOnePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UsuarioControllerFindOneQueryResponse,
    ResponseErrorConfig<UsuarioControllerFindOne400 | UsuarioControllerFindOne401 | UsuarioControllerFindOne404 | UsuarioControllerFindOne500>,
    unknown
  >({ method: 'GET', url: `/usuarios/${id}`, baseURL: 'http://localhost:3000', ...requestConfig })
  return res
}

export function usuarioControllerFindOneQueryOptions(
  id: UsuarioControllerFindOnePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = usuarioControllerFindOneQueryKey(id)
  return queryOptions<
    ResponseConfig<UsuarioControllerFindOneQueryResponse>,
    ResponseErrorConfig<UsuarioControllerFindOne400 | UsuarioControllerFindOne401 | UsuarioControllerFindOne404 | UsuarioControllerFindOne500>,
    ResponseConfig<UsuarioControllerFindOneQueryResponse>,
    typeof queryKey
  >({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return usuarioControllerFindOne(id, config)
    },
  })
}

/**
 * @summary Dados do usuário
 * {@link /usuarios/:id}
 */
export function useUsuarioControllerFindOne<
  TData = ResponseConfig<UsuarioControllerFindOneQueryResponse>,
  TQueryData = ResponseConfig<UsuarioControllerFindOneQueryResponse>,
  TQueryKey extends QueryKey = UsuarioControllerFindOneQueryKey,
>(
  id: UsuarioControllerFindOnePathParams['id'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<UsuarioControllerFindOneQueryResponse>,
        ResponseErrorConfig<UsuarioControllerFindOne400 | UsuarioControllerFindOne401 | UsuarioControllerFindOne404 | UsuarioControllerFindOne500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? usuarioControllerFindOneQueryKey(id)

  const query = useQuery(
    {
      ...(usuarioControllerFindOneQueryOptions(id, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<UsuarioControllerFindOne400 | UsuarioControllerFindOne401 | UsuarioControllerFindOne404 | UsuarioControllerFindOne500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}