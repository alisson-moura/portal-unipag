/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  UsuarioControllerFindOneQueryResponse,
  UsuarioControllerFindOnePathParams,
  UsuarioControllerFindOne400,
  UsuarioControllerFindOne401,
  UsuarioControllerFindOne404,
  UsuarioControllerFindOne500,
} from '../../types/UsuarioControllerFindOne.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const usuarioControllerFindOneSuspenseQueryKey = (id: UsuarioControllerFindOnePathParams['id']) =>
  [{ url: '/usuarios/:id', params: { id: id } }] as const

export type UsuarioControllerFindOneSuspenseQueryKey = ReturnType<typeof usuarioControllerFindOneSuspenseQueryKey>

/**
 * @summary Dados do usuário
 * {@link /usuarios/:id}
 */
export async function usuarioControllerFindOneSuspense(
  id: UsuarioControllerFindOnePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UsuarioControllerFindOneQueryResponse,
    ResponseErrorConfig<UsuarioControllerFindOne400 | UsuarioControllerFindOne401 | UsuarioControllerFindOne404 | UsuarioControllerFindOne500>,
    unknown
  >({ method: 'GET', url: `/usuarios/${id}`, baseURL: 'http://localhost:3000', ...requestConfig })
  return res
}

export function usuarioControllerFindOneSuspenseQueryOptions(
  id: UsuarioControllerFindOnePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = usuarioControllerFindOneSuspenseQueryKey(id)
  return queryOptions<
    ResponseConfig<UsuarioControllerFindOneQueryResponse>,
    ResponseErrorConfig<UsuarioControllerFindOne400 | UsuarioControllerFindOne401 | UsuarioControllerFindOne404 | UsuarioControllerFindOne500>,
    ResponseConfig<UsuarioControllerFindOneQueryResponse>,
    typeof queryKey
  >({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return usuarioControllerFindOneSuspense(id, config)
    },
  })
}

/**
 * @summary Dados do usuário
 * {@link /usuarios/:id}
 */
export function useUsuarioControllerFindOneSuspense<
  TData = ResponseConfig<UsuarioControllerFindOneQueryResponse>,
  TQueryKey extends QueryKey = UsuarioControllerFindOneSuspenseQueryKey,
>(
  id: UsuarioControllerFindOnePathParams['id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<UsuarioControllerFindOneQueryResponse>,
        ResponseErrorConfig<UsuarioControllerFindOne400 | UsuarioControllerFindOne401 | UsuarioControllerFindOne404 | UsuarioControllerFindOne500>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? usuarioControllerFindOneSuspenseQueryKey(id)

  const query = useSuspenseQuery(
    {
      ...(usuarioControllerFindOneSuspenseQueryOptions(id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<UsuarioControllerFindOne400 | UsuarioControllerFindOne401 | UsuarioControllerFindOne404 | UsuarioControllerFindOne500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}