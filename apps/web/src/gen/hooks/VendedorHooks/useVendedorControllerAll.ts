/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  VendedorControllerAllQueryResponse,
  VendedorControllerAllQueryParams,
  VendedorControllerAll400,
  VendedorControllerAll401,
  VendedorControllerAll404,
  VendedorControllerAll500,
} from '../../types/VendedorControllerAll.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const vendedorControllerAllQueryKey = (params: VendedorControllerAllQueryParams) => [{ url: '/vendedores' }, ...(params ? [params] : [])] as const

export type VendedorControllerAllQueryKey = ReturnType<typeof vendedorControllerAllQueryKey>

/**
 * @summary Lista todos os vendedores
 * {@link /vendedores}
 */
export async function vendedorControllerAll(params: VendedorControllerAllQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    VendedorControllerAllQueryResponse,
    ResponseErrorConfig<VendedorControllerAll400 | VendedorControllerAll401 | VendedorControllerAll404 | VendedorControllerAll500>,
    unknown
  >({ method: 'GET', url: `/vendedores`, baseURL: 'http://localhost:3000', params, ...requestConfig })
  return res
}

export function vendedorControllerAllQueryOptions(params: VendedorControllerAllQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = vendedorControllerAllQueryKey(params)
  return queryOptions<
    ResponseConfig<VendedorControllerAllQueryResponse>,
    ResponseErrorConfig<VendedorControllerAll400 | VendedorControllerAll401 | VendedorControllerAll404 | VendedorControllerAll500>,
    ResponseConfig<VendedorControllerAllQueryResponse>,
    typeof queryKey
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return vendedorControllerAll(params, config)
    },
  })
}

/**
 * @summary Lista todos os vendedores
 * {@link /vendedores}
 */
export function useVendedorControllerAll<
  TData = ResponseConfig<VendedorControllerAllQueryResponse>,
  TQueryData = ResponseConfig<VendedorControllerAllQueryResponse>,
  TQueryKey extends QueryKey = VendedorControllerAllQueryKey,
>(
  params: VendedorControllerAllQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<VendedorControllerAllQueryResponse>,
        ResponseErrorConfig<VendedorControllerAll400 | VendedorControllerAll401 | VendedorControllerAll404 | VendedorControllerAll500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? vendedorControllerAllQueryKey(params)

  const query = useQuery(
    {
      ...(vendedorControllerAllQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<VendedorControllerAll400 | VendedorControllerAll401 | VendedorControllerAll404 | VendedorControllerAll500>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}