/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  VendedorControllerAtribuirEstabelecimentoMutationRequest,
  VendedorControllerAtribuirEstabelecimentoMutationResponse,
  VendedorControllerAtribuirEstabelecimentoPathParams,
  VendedorControllerAtribuirEstabelecimento400,
  VendedorControllerAtribuirEstabelecimento401,
  VendedorControllerAtribuirEstabelecimento404,
  VendedorControllerAtribuirEstabelecimento500,
} from '../../types/VendedorControllerAtribuirEstabelecimento.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const vendedorControllerAtribuirEstabelecimentoMutationKey = () => [{ url: '/vendedores/{id}/estabelecimentos' }] as const

export type VendedorControllerAtribuirEstabelecimentoMutationKey = ReturnType<typeof vendedorControllerAtribuirEstabelecimentoMutationKey>

/**
 * @summary Atribui um estabelecimento ao vendedor
 * {@link /vendedores/:id/estabelecimentos}
 */
export async function vendedorControllerAtribuirEstabelecimento(
  id: VendedorControllerAtribuirEstabelecimentoPathParams['id'],
  data: VendedorControllerAtribuirEstabelecimentoMutationRequest,
  config: Partial<RequestConfig<VendedorControllerAtribuirEstabelecimentoMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    VendedorControllerAtribuirEstabelecimentoMutationResponse,
    ResponseErrorConfig<
      | VendedorControllerAtribuirEstabelecimento400
      | VendedorControllerAtribuirEstabelecimento401
      | VendedorControllerAtribuirEstabelecimento404
      | VendedorControllerAtribuirEstabelecimento500
    >,
    VendedorControllerAtribuirEstabelecimentoMutationRequest
  >({ method: 'POST', url: `/vendedores/${id}/estabelecimentos`, baseURL: 'http://localhost:3000', data, ...requestConfig })
  return res
}

/**
 * @summary Atribui um estabelecimento ao vendedor
 * {@link /vendedores/:id/estabelecimentos}
 */
export function useVendedorControllerAtribuirEstabelecimento<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<VendedorControllerAtribuirEstabelecimentoMutationResponse>,
      ResponseErrorConfig<
        | VendedorControllerAtribuirEstabelecimento400
        | VendedorControllerAtribuirEstabelecimento401
        | VendedorControllerAtribuirEstabelecimento404
        | VendedorControllerAtribuirEstabelecimento500
      >,
      { id: VendedorControllerAtribuirEstabelecimentoPathParams['id']; data: VendedorControllerAtribuirEstabelecimentoMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<VendedorControllerAtribuirEstabelecimentoMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? vendedorControllerAtribuirEstabelecimentoMutationKey()

  return useMutation<
    ResponseConfig<VendedorControllerAtribuirEstabelecimentoMutationResponse>,
    ResponseErrorConfig<
      | VendedorControllerAtribuirEstabelecimento400
      | VendedorControllerAtribuirEstabelecimento401
      | VendedorControllerAtribuirEstabelecimento404
      | VendedorControllerAtribuirEstabelecimento500
    >,
    { id: VendedorControllerAtribuirEstabelecimentoPathParams['id']; data: VendedorControllerAtribuirEstabelecimentoMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return vendedorControllerAtribuirEstabelecimento(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}