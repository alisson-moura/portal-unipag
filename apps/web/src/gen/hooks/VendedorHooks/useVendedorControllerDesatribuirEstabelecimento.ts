/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  VendedorControllerDesatribuirEstabelecimentoMutationResponse,
  VendedorControllerDesatribuirEstabelecimentoPathParams,
  VendedorControllerDesatribuirEstabelecimento400,
  VendedorControllerDesatribuirEstabelecimento401,
  VendedorControllerDesatribuirEstabelecimento404,
  VendedorControllerDesatribuirEstabelecimento500,
} from '../../types/VendedorControllerDesatribuirEstabelecimento.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const vendedorControllerDesatribuirEstabelecimentoMutationKey = () => [{ url: '/vendedores/{id}/estabelecimentos/{estabelecimento_id}' }] as const

export type VendedorControllerDesatribuirEstabelecimentoMutationKey = ReturnType<typeof vendedorControllerDesatribuirEstabelecimentoMutationKey>

/**
 * @summary Desatribui um estabelecimento do vendedor
 * {@link /vendedores/:id/estabelecimentos/:estabelecimento_id}
 */
export async function vendedorControllerDesatribuirEstabelecimento(
  id: VendedorControllerDesatribuirEstabelecimentoPathParams['id'],
  estabelecimento_id: VendedorControllerDesatribuirEstabelecimentoPathParams['estabelecimento_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    VendedorControllerDesatribuirEstabelecimentoMutationResponse,
    ResponseErrorConfig<
      | VendedorControllerDesatribuirEstabelecimento400
      | VendedorControllerDesatribuirEstabelecimento401
      | VendedorControllerDesatribuirEstabelecimento404
      | VendedorControllerDesatribuirEstabelecimento500
    >,
    unknown
  >({ method: 'DELETE', url: `/vendedores/${id}/estabelecimentos/${estabelecimento_id}`, baseURL: 'http://localhost:3000', ...requestConfig })
  return res
}

/**
 * @summary Desatribui um estabelecimento do vendedor
 * {@link /vendedores/:id/estabelecimentos/:estabelecimento_id}
 */
export function useVendedorControllerDesatribuirEstabelecimento<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<VendedorControllerDesatribuirEstabelecimentoMutationResponse>,
      ResponseErrorConfig<
        | VendedorControllerDesatribuirEstabelecimento400
        | VendedorControllerDesatribuirEstabelecimento401
        | VendedorControllerDesatribuirEstabelecimento404
        | VendedorControllerDesatribuirEstabelecimento500
      >,
      {
        id: VendedorControllerDesatribuirEstabelecimentoPathParams['id']
        estabelecimento_id: VendedorControllerDesatribuirEstabelecimentoPathParams['estabelecimento_id']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? vendedorControllerDesatribuirEstabelecimentoMutationKey()

  return useMutation<
    ResponseConfig<VendedorControllerDesatribuirEstabelecimentoMutationResponse>,
    ResponseErrorConfig<
      | VendedorControllerDesatribuirEstabelecimento400
      | VendedorControllerDesatribuirEstabelecimento401
      | VendedorControllerDesatribuirEstabelecimento404
      | VendedorControllerDesatribuirEstabelecimento500
    >,
    {
      id: VendedorControllerDesatribuirEstabelecimentoPathParams['id']
      estabelecimento_id: VendedorControllerDesatribuirEstabelecimentoPathParams['estabelecimento_id']
    },
    TContext
  >(
    {
      mutationFn: async ({ id, estabelecimento_id }) => {
        return vendedorControllerDesatribuirEstabelecimento(id, estabelecimento_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}