/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  VendedorControllerEstabelecimentoRecebimentosQueryResponse,
  VendedorControllerEstabelecimentoRecebimentosPathParams,
  VendedorControllerEstabelecimentoRecebimentosQueryParams,
  VendedorControllerEstabelecimentoRecebimentos400,
  VendedorControllerEstabelecimentoRecebimentos401,
  VendedorControllerEstabelecimentoRecebimentos404,
  VendedorControllerEstabelecimentoRecebimentos500,
} from '../../types/VendedorControllerEstabelecimentoRecebimentos.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const vendedorControllerEstabelecimentoRecebimentosSuspenseQueryKey = (
  estabelecimento_id: VendedorControllerEstabelecimentoRecebimentosPathParams['estabelecimento_id'],
  params: VendedorControllerEstabelecimentoRecebimentosQueryParams,
) => [{ url: '/vendedores/recebimentos/:estabelecimento_id', params: { estabelecimento_id: estabelecimento_id } }, ...(params ? [params] : [])] as const

export type VendedorControllerEstabelecimentoRecebimentosSuspenseQueryKey = ReturnType<typeof vendedorControllerEstabelecimentoRecebimentosSuspenseQueryKey>

/**
 * @summary Recebimentos do vendedor no estabelecimento e periodo informados
 * {@link /vendedores/recebimentos/:estabelecimento_id}
 */
export async function vendedorControllerEstabelecimentoRecebimentosSuspense(
  estabelecimento_id: VendedorControllerEstabelecimentoRecebimentosPathParams['estabelecimento_id'],
  params: VendedorControllerEstabelecimentoRecebimentosQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    VendedorControllerEstabelecimentoRecebimentosQueryResponse,
    ResponseErrorConfig<
      | VendedorControllerEstabelecimentoRecebimentos400
      | VendedorControllerEstabelecimentoRecebimentos401
      | VendedorControllerEstabelecimentoRecebimentos404
      | VendedorControllerEstabelecimentoRecebimentos500
    >,
    unknown
  >({ method: 'GET', url: `/vendedores/recebimentos/${estabelecimento_id}`, baseURL: 'http://localhost:3000', params, ...requestConfig })
  return res
}

export function vendedorControllerEstabelecimentoRecebimentosSuspenseQueryOptions(
  estabelecimento_id: VendedorControllerEstabelecimentoRecebimentosPathParams['estabelecimento_id'],
  params: VendedorControllerEstabelecimentoRecebimentosQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = vendedorControllerEstabelecimentoRecebimentosSuspenseQueryKey(estabelecimento_id, params)
  return queryOptions<
    ResponseConfig<VendedorControllerEstabelecimentoRecebimentosQueryResponse>,
    ResponseErrorConfig<
      | VendedorControllerEstabelecimentoRecebimentos400
      | VendedorControllerEstabelecimentoRecebimentos401
      | VendedorControllerEstabelecimentoRecebimentos404
      | VendedorControllerEstabelecimentoRecebimentos500
    >,
    ResponseConfig<VendedorControllerEstabelecimentoRecebimentosQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(estabelecimento_id && params),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return vendedorControllerEstabelecimentoRecebimentosSuspense(estabelecimento_id, params, config)
    },
  })
}

/**
 * @summary Recebimentos do vendedor no estabelecimento e periodo informados
 * {@link /vendedores/recebimentos/:estabelecimento_id}
 */
export function useVendedorControllerEstabelecimentoRecebimentosSuspense<
  TData = ResponseConfig<VendedorControllerEstabelecimentoRecebimentosQueryResponse>,
  TQueryKey extends QueryKey = VendedorControllerEstabelecimentoRecebimentosSuspenseQueryKey,
>(
  estabelecimento_id: VendedorControllerEstabelecimentoRecebimentosPathParams['estabelecimento_id'],
  params: VendedorControllerEstabelecimentoRecebimentosQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<VendedorControllerEstabelecimentoRecebimentosQueryResponse>,
        ResponseErrorConfig<
          | VendedorControllerEstabelecimentoRecebimentos400
          | VendedorControllerEstabelecimentoRecebimentos401
          | VendedorControllerEstabelecimentoRecebimentos404
          | VendedorControllerEstabelecimentoRecebimentos500
        >,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? vendedorControllerEstabelecimentoRecebimentosSuspenseQueryKey(estabelecimento_id, params)

  const query = useSuspenseQuery(
    {
      ...(vendedorControllerEstabelecimentoRecebimentosSuspenseQueryOptions(estabelecimento_id, params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<
      | VendedorControllerEstabelecimentoRecebimentos400
      | VendedorControllerEstabelecimentoRecebimentos401
      | VendedorControllerEstabelecimentoRecebimentos404
      | VendedorControllerEstabelecimentoRecebimentos500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}