/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  VendedorControllerEstabelecimentosAtribuidosParaQueryResponse,
  VendedorControllerEstabelecimentosAtribuidosParaPathParams,
  VendedorControllerEstabelecimentosAtribuidosParaQueryParams,
  VendedorControllerEstabelecimentosAtribuidosPara400,
  VendedorControllerEstabelecimentosAtribuidosPara401,
  VendedorControllerEstabelecimentosAtribuidosPara404,
  VendedorControllerEstabelecimentosAtribuidosPara500,
} from '../../types/VendedorControllerEstabelecimentosAtribuidosPara.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const vendedorControllerEstabelecimentosAtribuidosParaSuspenseQueryKey = (
  id: VendedorControllerEstabelecimentosAtribuidosParaPathParams['id'],
  params: VendedorControllerEstabelecimentosAtribuidosParaQueryParams,
) => [{ url: '/vendedores/:id/estabelecimentos', params: { id: id } }, ...(params ? [params] : [])] as const

export type VendedorControllerEstabelecimentosAtribuidosParaSuspenseQueryKey = ReturnType<
  typeof vendedorControllerEstabelecimentosAtribuidosParaSuspenseQueryKey
>

/**
 * @summary Estabelecimentos atribuidos ao vendedor
 * {@link /vendedores/:id/estabelecimentos}
 */
export async function vendedorControllerEstabelecimentosAtribuidosParaSuspense(
  id: VendedorControllerEstabelecimentosAtribuidosParaPathParams['id'],
  params: VendedorControllerEstabelecimentosAtribuidosParaQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    VendedorControllerEstabelecimentosAtribuidosParaQueryResponse,
    ResponseErrorConfig<
      | VendedorControllerEstabelecimentosAtribuidosPara400
      | VendedorControllerEstabelecimentosAtribuidosPara401
      | VendedorControllerEstabelecimentosAtribuidosPara404
      | VendedorControllerEstabelecimentosAtribuidosPara500
    >,
    unknown
  >({ method: 'GET', url: `/vendedores/${id}/estabelecimentos`, baseURL: 'http://localhost:3000', params, ...requestConfig })
  return res
}

export function vendedorControllerEstabelecimentosAtribuidosParaSuspenseQueryOptions(
  id: VendedorControllerEstabelecimentosAtribuidosParaPathParams['id'],
  params: VendedorControllerEstabelecimentosAtribuidosParaQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = vendedorControllerEstabelecimentosAtribuidosParaSuspenseQueryKey(id, params)
  return queryOptions<
    ResponseConfig<VendedorControllerEstabelecimentosAtribuidosParaQueryResponse>,
    ResponseErrorConfig<
      | VendedorControllerEstabelecimentosAtribuidosPara400
      | VendedorControllerEstabelecimentosAtribuidosPara401
      | VendedorControllerEstabelecimentosAtribuidosPara404
      | VendedorControllerEstabelecimentosAtribuidosPara500
    >,
    ResponseConfig<VendedorControllerEstabelecimentosAtribuidosParaQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(id && params),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return vendedorControllerEstabelecimentosAtribuidosParaSuspense(id, params, config)
    },
  })
}

/**
 * @summary Estabelecimentos atribuidos ao vendedor
 * {@link /vendedores/:id/estabelecimentos}
 */
export function useVendedorControllerEstabelecimentosAtribuidosParaSuspense<
  TData = ResponseConfig<VendedorControllerEstabelecimentosAtribuidosParaQueryResponse>,
  TQueryKey extends QueryKey = VendedorControllerEstabelecimentosAtribuidosParaSuspenseQueryKey,
>(
  id: VendedorControllerEstabelecimentosAtribuidosParaPathParams['id'],
  params: VendedorControllerEstabelecimentosAtribuidosParaQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        ResponseConfig<VendedorControllerEstabelecimentosAtribuidosParaQueryResponse>,
        ResponseErrorConfig<
          | VendedorControllerEstabelecimentosAtribuidosPara400
          | VendedorControllerEstabelecimentosAtribuidosPara401
          | VendedorControllerEstabelecimentosAtribuidosPara404
          | VendedorControllerEstabelecimentosAtribuidosPara500
        >,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? vendedorControllerEstabelecimentosAtribuidosParaSuspenseQueryKey(id, params)

  const query = useSuspenseQuery(
    {
      ...(vendedorControllerEstabelecimentosAtribuidosParaSuspenseQueryOptions(id, params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<
      | VendedorControllerEstabelecimentosAtribuidosPara400
      | VendedorControllerEstabelecimentosAtribuidosPara401
      | VendedorControllerEstabelecimentosAtribuidosPara404
      | VendedorControllerEstabelecimentosAtribuidosPara500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}