/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  VendedorControllerRecebimentosQueryResponse,
  VendedorControllerRecebimentosPathParams,
  VendedorControllerRecebimentosQueryParams,
  VendedorControllerRecebimentos400,
  VendedorControllerRecebimentos401,
  VendedorControllerRecebimentos404,
  VendedorControllerRecebimentos500,
} from '../../types/VendedorControllerRecebimentos.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const vendedorControllerRecebimentosQueryKey = (id: VendedorControllerRecebimentosPathParams['id'], params: VendedorControllerRecebimentosQueryParams) =>
  [{ url: '/vendedores/:id/recebimentos', params: { id: id } }, ...(params ? [params] : [])] as const

export type VendedorControllerRecebimentosQueryKey = ReturnType<typeof vendedorControllerRecebimentosQueryKey>

/**
 * @summary Recebimentos do vendedor no período informado
 * {@link /vendedores/:id/recebimentos}
 */
export async function vendedorControllerRecebimentos(
  id: VendedorControllerRecebimentosPathParams['id'],
  params: VendedorControllerRecebimentosQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    VendedorControllerRecebimentosQueryResponse,
    ResponseErrorConfig<
      VendedorControllerRecebimentos400 | VendedorControllerRecebimentos401 | VendedorControllerRecebimentos404 | VendedorControllerRecebimentos500
    >,
    unknown
  >({ method: 'GET', url: `/vendedores/${id}/recebimentos`, baseURL: 'http://localhost:3000', params, ...requestConfig })
  return res
}

export function vendedorControllerRecebimentosQueryOptions(
  id: VendedorControllerRecebimentosPathParams['id'],
  params: VendedorControllerRecebimentosQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = vendedorControllerRecebimentosQueryKey(id, params)
  return queryOptions<
    ResponseConfig<VendedorControllerRecebimentosQueryResponse>,
    ResponseErrorConfig<
      VendedorControllerRecebimentos400 | VendedorControllerRecebimentos401 | VendedorControllerRecebimentos404 | VendedorControllerRecebimentos500
    >,
    ResponseConfig<VendedorControllerRecebimentosQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(id && params),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return vendedorControllerRecebimentos(id, params, config)
    },
  })
}

/**
 * @summary Recebimentos do vendedor no período informado
 * {@link /vendedores/:id/recebimentos}
 */
export function useVendedorControllerRecebimentos<
  TData = ResponseConfig<VendedorControllerRecebimentosQueryResponse>,
  TQueryData = ResponseConfig<VendedorControllerRecebimentosQueryResponse>,
  TQueryKey extends QueryKey = VendedorControllerRecebimentosQueryKey,
>(
  id: VendedorControllerRecebimentosPathParams['id'],
  params: VendedorControllerRecebimentosQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        ResponseConfig<VendedorControllerRecebimentosQueryResponse>,
        ResponseErrorConfig<
          VendedorControllerRecebimentos400 | VendedorControllerRecebimentos401 | VendedorControllerRecebimentos404 | VendedorControllerRecebimentos500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? vendedorControllerRecebimentosQueryKey(id, params)

  const query = useQuery(
    {
      ...(vendedorControllerRecebimentosQueryOptions(id, params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      VendedorControllerRecebimentos400 | VendedorControllerRecebimentos401 | VendedorControllerRecebimentos404 | VendedorControllerRecebimentos500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}